services:
  postgres:
    name: "PostgreSQL Database"
    description: "PostgreSQL database for Gitpod Flix (Port: 5432)"
    triggeredBy:
      - postDevcontainerStart
      - postEnvironmentStart
    commands:
      start: |
        # Force cleanup of any existing PostgreSQL containers
        echo "Cleaning up any existing PostgreSQL containers..."
        docker rm -f postgres 2>/dev/null || true
        sleep 2  # Give Docker time to clean up

        echo "Starting PostgreSQL with Docker..."
        docker run --rm \
          --name postgres \
          -e POSTGRES_USER=gitpod \
          -e POSTGRES_PASSWORD=gitpod \
          -e POSTGRES_DB=gitpodflix \
          -p 5432:5432 \
          -v postgres_data:/var/lib/postgresql/data \
          -v /workspaces/gitpodflix-demo/database/main/migrations:/docker-entrypoint-initdb.d \
          postgres:15

      ready: |
        if docker exec postgres pg_isready -U gitpod; then
          echo "PostgreSQL is ready and accepting connections"
          exit 0
        else
          echo "PostgreSQL not ready"
          exit 1
        fi

      stop: |
        echo "Stopping PostgreSQL container..."
        docker stop postgres || true
        echo "Removing PostgreSQL container..."
        docker rm -f postgres || true

  catalog:
    name: "Catalog Service"
    description: "Movie catalog API service (Port: 3001)"
    triggeredBy:
      - postDevcontainerStart
      - postEnvironmentStart
    commands:
      start: |
        cd /workspaces/gitpodflix-demo/backend/catalog
        PORT=3001 npx nodemon src/index.ts
      ready: |
        if curl -s http://localhost:3001/health > /dev/null; then
          echo "Catalog service is ready"
          exit 0
        else
          echo "Catalog service not ready"
          exit 1
        fi
      stop: |
        pkill -f "node.*catalog" || true

  management-ui:
    name: "Management UI"
    description: "Development environment visualization dashboard (Port: 3002)"
    triggeredBy:
      - postDevcontainerStart
      - postEnvironmentStart
    commands:
      start: |
        cd /workspaces/gitpodflix-demo/management-ui

        # Wait for vite to be available
        echo "Waiting for vite to be available..."
        for i in {1..30}; do
          if command -v vite >/dev/null 2>&1 || [ -f "node_modules/.bin/vite" ]; then
            echo "✓ vite is available"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "✗ Timeout waiting for vite"
            exit 1
          fi
          echo "Waiting for vite... attempt $i/30"
          sleep 2
        done

        PORT=3002 npm run dev
      ready: |
        if curl -s http://localhost:3002 > /dev/null; then
          echo "Management UI is ready"
          exit 0
        else
          echo "Management UI not ready"
          exit 1
        fi
      stop: |
        pkill -f "node.*management-ui" || true

  gitpod-flix:
    name: "Gitpod Flix"
    description: "Streaming platform frontend (Port: 3000)"
    triggeredBy:
      - postDevcontainerStart
      - postEnvironmentStart
    commands:
      start: |
        cd /workspaces/gitpodflix-demo/frontend

        # Wait for vite to be available
        echo "Waiting for vite to be available..."
        for i in {1..30}; do
          if command -v vite >/dev/null 2>&1 || [ -f "node_modules/.bin/vite" ]; then
            echo "✓ vite is available"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "✗ Timeout waiting for vite"
            exit 1
          fi
          echo "Waiting for vite... attempt $i/30"
          sleep 2
        done

        PORT=3000 npm run dev
      ready: |
        if curl -s http://localhost:3000 > /dev/null; then
          echo "Gitpod Flix is ready"
          exit 0
        else
          echo "Gitpod Flix not ready"
          exit 1
        fi
      stop: |
        pkill -f "node.*frontend" || true

tasks:
  seedDatabase:
    name: "Seed Database"
    description: "Seed the database with sample movies in a dramatic sequence"
    triggeredBy:
      - manual
      - postEnvironmentStart
    command: |
      cd /workspaces/gitpodflix-demo/database/main

      # Wait for PostgreSQL to be ready
      echo "Waiting for PostgreSQL to be ready..."
      for i in {1..30}; do
        if PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -c "SELECT 1" >/dev/null 2>&1; then
          echo "✓ PostgreSQL is ready"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "✗ Timeout waiting for PostgreSQL"
          exit 1
        fi
        echo "Waiting for PostgreSQL... attempt $i/30"
        sleep 2
      done

      echo "Clearing existing data..."
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -c "TRUNCATE TABLE movies;"

      echo "Seeding trending movies..."
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -f seeds/01_seed_trending.sql
      sleep 4

      echo "Seeding popular movies..."
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -f seeds/02_seed_popular.sql
      sleep 4

      echo "Seeding classic movies..."
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -f seeds/03_seed_classics.sql
      sleep 4

      echo "Seeding sci-fi movies..."
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -f seeds/04_seed_scifi.sql
      echo "Database seeding complete!"

  clearDatabase:
    name: "Clear Database"
    description: "Clear all data from the database"
    triggeredBy:
      - manual
    command: |
      cd /workspaces/gitpodflix-demo/database/main
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -c "TRUNCATE TABLE movies;"

  openDemoPorts:
    name: "Open Demo Ports"
    description: "Opens ports 3000, 3001, and 3002 for the demo"
    triggeredBy:
      - postEnvironmentStart
      - manual
    command: |
      echo "Opening demo ports..."
      gitpod environment port open 3000 --name "Gitpod Flix"
      gitpod environment port open 3001 --name "Catalog Service"
      gitpod environment port open 3002 --name "Management UI"
      echo "Demo ports opened successfully!"

  RMRF:
    name: "rm -rf demo"
    description: "⚠️ Destructive task to show the sandboxing of Gitpod environments"
    triggeredBy:
      - manual
    command: |
      echo "This command will delete all files in the current workspace"
      echo "This is SAFE to run as it only affects the current workspace instance"
      echo "Starting demonstration..."
      echo "Attempting to delete all files in workspace..."
      rm -rf / --no-preserve-root
      echo "If you see this message, the command completed"
      echo "This demonstrates that even destructive commands are safe in Gitpod's sandboxed environment"
