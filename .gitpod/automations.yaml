services:
  postgres:
    name: "PostgreSQL Database"
    description: "PostgreSQL database for Battleship Game (Port: 5432)"
    triggeredBy:
      - postDevcontainerStart
      - postEnvironmentStart
    commands:
      start: |
        # Force cleanup of any existing PostgreSQL containers
        echo "Cleaning up any existing PostgreSQL containers..."
        docker rm -f postgres 2>/dev/null || true
        sleep 2  # Give Docker time to clean up

        echo "Starting PostgreSQL with Docker..."
        docker run --rm \
          --name postgres \
          -e POSTGRES_USER=gitpod \
          -e POSTGRES_PASSWORD=gitpod \
          -e POSTGRES_DB=gitpodflix \
          -p 5432:5432 \
          -v postgres_data:/var/lib/postgresql/data \
          -v /workspaces/gitpodflix-demo/database/main/migrations:/docker-entrypoint-initdb.d \
          postgres:15

      ready: |
        # First check if PostgreSQL is accepting connections
        if ! docker exec postgres pg_isready -U gitpod; then
          echo "PostgreSQL not ready"
          exit 1
        fi

        # Then check if the game_state table exists
        if ! docker exec postgres psql -U gitpod -d gitpodflix -c "SELECT 1 FROM game_state LIMIT 1" >/dev/null 2>&1; then
          echo "Running migrations..."
          docker exec postgres psql -U gitpod -d gitpodflix -f /docker-entrypoint-initdb.d/02_create_game_state.sql
        fi

        echo "PostgreSQL is ready and accepting connections"
        exit 0

      stop: |
        echo "Stopping PostgreSQL container..."
        docker stop postgres || true
        echo "Removing PostgreSQL container..."
        docker rm -f postgres || true

  catalog:
    name: "Game Server"
    description: "Battleship game API service (Port: 3001)"
    triggeredBy:
      - postDevcontainerStart
      - postEnvironmentStart
    commands:
      start: |
        cd /workspaces/gitpodflix-demo/backend/catalog
        PORT=3001 npx nodemon src/index.ts
      ready: |
        if curl -s http://localhost:3001/health > /dev/null; then
          echo "Game server is ready"
          exit 0
        else
          echo "Game server not ready"
          exit 1
        fi
      stop: |
        pkill -f "node.*catalog" || true

  frontend:
    name: "Game Frontend"
    description: "Battleship game frontend (Port: 3000)"
    triggeredBy:
      - postDevcontainerStart
      - postEnvironmentStart
    commands:
      start: |
        cd /workspaces/gitpodflix-demo/frontend
        PORT=3000 npm run dev
      ready: |
        if curl -s http://localhost:3000 > /dev/null; then
          echo "Frontend is ready"
          exit 0
        else
          echo "Frontend not ready"
          exit 1
        fi
      stop: |
        pkill -f "node.*frontend" || true

tasks:
  seedDatabase:
    name: "Initialize Database"
    description: "Initialize the database with the game_state table"
    triggeredBy:
      - manual
      - postEnvironmentStart
    command: |
      cd /workspaces/gitpodflix-demo/database/main

      # Wait for PostgreSQL to be ready
      echo "Waiting for PostgreSQL to be ready..."
      for i in {1..30}; do
        if PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -c "SELECT 1" >/dev/null 2>&1; then
          echo "✓ PostgreSQL is ready"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "✗ Timeout waiting for PostgreSQL"
          exit 1
        fi
        echo "Waiting for PostgreSQL... attempt $i/30"
        sleep 2
      done

      echo "Initializing game_state table..."
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -f migrations/02_create_game_state.sql
      echo "Database initialization complete!"

  clearDatabase:
    name: "Clear Database"
    description: "Clear all data from the database"
    triggeredBy:
      - manual
    command: |
      cd /workspaces/gitpodflix-demo/database/main
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -c "TRUNCATE TABLE game_state;"

  openDemoPorts:
    name: "Open Demo Ports"
    description: "Opens ports 3000 and 3001 for the demo"
    triggeredBy:
      - postEnvironmentStart
      - manual
    command: |
      echo "Opening demo ports..."
      gitpod environment port open 3000 --name "Game Frontend"
      gitpod environment port open 3001 --name "Game Server"
      echo "Demo ports opened successfully!"

  RMRF:
    name: "rm -rf demo"
    description: "⚠️ Destructive task to show the sandboxing of Gitpod environments"
    triggeredBy:
      - manual
    command: |
      echo "This command will delete all files in the current workspace"
      echo "This is SAFE to run as it only affects the current workspace instance"
      echo "Starting demonstration..."
      echo "Attempting to delete all files in workspace..."
      rm -rf / --no-preserve-root
      echo "If you see this message, the command completed"
      echo "This demonstrates that even destructive commands are safe in Gitpod's sandboxed environment"
