services:
  minikube:
    name: "Minikube Cluster"
    description: "Kubernetes cluster running all GitpodFlix services"
    triggeredBy:
      - postDevcontainerStart
      - postEnvironmentStart
    commands:
      start: |
        echo "üöÄ Starting Minikube cluster..."
        
        # Check if Minikube is already running
        if minikube status | grep -q "Running"; then
          echo "‚úÖ Minikube is already running"
                else
          echo "Starting Minikube..."
          minikube start --driver=docker --memory=4096 --cpus=2 --force
        fi

        # Configure Docker environment
        eval $(minikube docker-env)

        # Build images if they don't exist
        if ! docker images | grep -q "catalog-service:latest"; then
          echo "Building catalog service image..."
          cd /workspaces/gitpodflix-demo/backend/catalog
          docker build -t catalog-service:latest .
        fi

        if ! docker images | grep -q "frontend:latest"; then
          echo "Building frontend image..."
          cd /workspaces/gitpodflix-demo/frontend
          docker build -t frontend:latest .
        fi

        cd /workspaces/gitpodflix-demo

        # Apply Kubernetes manifests
        echo "Applying Kubernetes manifests..."
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/catalog-service.yaml
        kubectl apply -f k8s/frontend.yaml

        # Wait for deployments
        echo "Waiting for deployments to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/postgres || true
        kubectl wait --for=condition=available --timeout=300s deployment/catalog-service || true
        kubectl wait --for=condition=available --timeout=300s deployment/frontend || true

      ready: |
        # Check if all pods are running
        if kubectl get pods | grep -E "(postgres|catalog-service|frontend)" | grep -v Running; then
          echo "Some pods are not running yet"
          exit 1
        else
          echo "All services are running in Kubernetes"
          exit 0
        fi

      stop: |
        echo "Stopping Kubernetes services..."
        kubectl delete -f k8s/ --ignore-not-found=true
        echo "Stopping Minikube..."
        minikube stop

  postgres-port-forward:
    name: "PostgreSQL Port Forward"
    description: "Port forward PostgreSQL service (Port: 5432)"
    triggeredBy:
      - manual
    commands:
      start: |
        echo "Starting PostgreSQL port forward..."
        kubectl port-forward service/postgres-service 5432:5432 &
        echo $! > /tmp/postgres-port-forward.pid
        sleep 2
        echo "PostgreSQL available at localhost:5432"

      ready: |
        if netstat -tuln | grep -q ":5432"; then
          echo "PostgreSQL port forward is active"
          exit 0
        else
          echo "PostgreSQL port forward not active"
          exit 1
        fi

      stop: |
        if [ -f /tmp/postgres-port-forward.pid ]; then
          kill $(cat /tmp/postgres-port-forward.pid) 2>/dev/null || true
          rm -f /tmp/postgres-port-forward.pid
        fi
        pkill -f "kubectl port-forward.*postgres" || true

  catalog-port-forward:
    name: "Catalog Service Port Forward"
    description: "Port forward Catalog API service (Port: 3001)"
    triggeredBy:
      - manual
    commands:
      start: |
        echo "Starting Catalog service port forward..."
        kubectl port-forward service/catalog-service 3001:3001 &
        echo $! > /tmp/catalog-port-forward.pid
        sleep 2
        echo "Catalog API available at localhost:3001"

      ready: |
        if netstat -tuln | grep -q ":3001"; then
          echo "Catalog port forward is active"
          exit 0
        else
          echo "Catalog port forward not active"
          exit 1
        fi

      stop: |
        if [ -f /tmp/catalog-port-forward.pid ]; then
          kill $(cat /tmp/catalog-port-forward.pid) 2>/dev/null || true
          rm -f /tmp/catalog-port-forward.pid
        fi
        pkill -f "kubectl port-forward.*catalog" || true

  frontend-port-forward:
    name: "Frontend Port Forward"
    description: "Port forward Frontend service (Port: 3000)"
    triggeredBy:
      - manual
    commands:
      start: |
        echo "Starting Frontend port forward..."
        kubectl port-forward service/frontend-service 3000:3000 &
        echo $! > /tmp/frontend-port-forward.pid
        sleep 2
        echo "Frontend available at localhost:3000"

      ready: |
        if netstat -tuln | grep -q ":3000"; then
          echo "Frontend port forward is active"
          exit 0
        else
          echo "Frontend port forward not active"
          exit 1
        fi

      stop: |
        if [ -f /tmp/frontend-port-forward.pid ]; then
          kill $(cat /tmp/frontend-port-forward.pid) 2>/dev/null || true
          rm -f /tmp/frontend-port-forward.pid
        fi
        pkill -f "kubectl port-forward.*frontend" || true

tasks:
  setupMinikube:
    name: "Setup Minikube"
    description: "Initialize Minikube cluster and deploy all services"
    triggeredBy:
      - manual
      - postEnvironmentStart
    command: |
      /workspaces/gitpodflix-demo/scripts/setup-minikube.sh

  startPortForwards:
    name: "Start Port Forwards"
    description: "Start all port forwards for local access"
    triggeredBy:
      - manual
    command: |
      echo "Starting all port forwards..."
      
      # Start PostgreSQL port forward
      kubectl port-forward service/postgres-service 5432:5432 &
      echo $! > /tmp/postgres-port-forward.pid
      
      # Start Catalog service port forward
      kubectl port-forward service/catalog-service 3001:3001 &
      echo $! > /tmp/catalog-port-forward.pid
      
      # Start Frontend port forward
      kubectl port-forward service/frontend-service 3000:3000 &
      echo $! > /tmp/frontend-port-forward.pid
      
      sleep 3
      echo "‚úÖ All port forwards started!"
      echo "üåê Frontend: http://localhost:3000"
      echo "üîå Catalog API: http://localhost:3001"
      echo "üóÑÔ∏è PostgreSQL: localhost:5432"

  stopPortForwards:
    name: "Stop Port Forwards"
    description: "Stop all port forwards"
    triggeredBy:
      - manual
    command: |
      echo "Stopping all port forwards..."
      
      # Stop all port forwards
      for pid_file in /tmp/*-port-forward.pid; do
        if [ -f "$pid_file" ]; then
          kill $(cat "$pid_file") 2>/dev/null || true
          rm -f "$pid_file"
        fi
      done
      
      pkill -f "kubectl port-forward" || true
      echo "‚úÖ All port forwards stopped"

  seedDatabase:
    name: "Seed Database"
    description: "Seed the database with sample movies in a dramatic sequence"
    triggeredBy:
      - manual
    command: |
      cd /workspaces/gitpodflix-demo/database/main

      # Ensure PostgreSQL port forward is active
      if ! netstat -tuln | grep -q ":5432"; then
        echo "Starting PostgreSQL port forward..."
        kubectl port-forward service/postgres-service 5432:5432 &
        sleep 3
      fi

      # Wait for PostgreSQL to be ready
      echo "Waiting for PostgreSQL to be ready..."
      for i in {1..30}; do
        if PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -c "SELECT 1" >/dev/null 2>&1; then
          echo "‚úì PostgreSQL is ready"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "‚úó Timeout waiting for PostgreSQL"
          exit 1
        fi
        echo "Waiting for PostgreSQL... attempt $i/30"
        sleep 2
      done

      echo "Clearing existing data..."
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -c "TRUNCATE TABLE movies;" 2>/dev/null || true

      echo "Seeding trending movies..."
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -f seeds/01_seed_trending.sql
      sleep 4

      echo "Seeding popular movies..."
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -f seeds/02_seed_popular.sql
      sleep 4

      echo "Seeding classic movies..."
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -f seeds/03_seed_classics.sql
      sleep 4

      echo "Seeding sci-fi movies..."
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -f seeds/04_seed_scifi.sql
      echo "Database seeding complete!"

  clearDatabase:
    name: "Clear Database"
    description: "Clear all data from the database"
    triggeredBy:
      - manual
    command: |
      cd /workspaces/gitpodflix-demo/database/main
      
      # Ensure PostgreSQL port forward is active
      if ! netstat -tuln | grep -q ":5432"; then
        echo "Starting PostgreSQL port forward..."
        kubectl port-forward service/postgres-service 5432:5432 &
        sleep 3
      fi
      
      PGPASSWORD=gitpod psql -h localhost -U gitpod -d gitpodflix -c "TRUNCATE TABLE movies;"

  showKubernetesStatus:
    name: "Show Kubernetes Status"
    description: "Display status of all Kubernetes resources"
    triggeredBy:
      - manual
    command: |
      echo "üîç Kubernetes Cluster Status:"
      echo "================================"
      
      echo "üìä Minikube Status:"
      minikube status
      echo ""
      
      echo "üèóÔ∏è Deployments:"
      kubectl get deployments
      echo ""
      
      echo "üîå Services:"
      kubectl get services
      echo ""
      
      echo "üì¶ Pods:"
      kubectl get pods
      echo ""
      
      echo "üíæ Persistent Volumes:"
      kubectl get pv,pvc
      echo ""

  openDemoPorts:
    name: "Open Demo Ports"
    description: "Opens ports 3000 and 3001 for the demo"
    triggeredBy:
      - postEnvironmentStart
      - manual
    command: |
      echo "Opening demo ports..."
      gitpod environment port open 3000 --name "Gitpod Flix"
      gitpod environment port open 3001 --name "Catalog Service"
      echo "Demo ports opened successfully!"

  RMRF:
    name: "rm -rf demo"
    description: "‚ö†Ô∏è Destructive task to show the sandboxing of Gitpod environments"
    triggeredBy:
      - manual
    command: |
      echo "This command will delete all files in the current workspace"
      echo "This is SAFE to run as it only affects the current workspace instance"
      echo "Starting demonstration..."
      echo "Attempting to delete all files in workspace..."
      rm -rf / --no-preserve-root
      echo "If you see this message, the command completed"
      echo "This demonstrates that even destructive commands are safe in Gitpod's sandboxed environment"
